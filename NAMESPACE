<<<<<<< HEAD
# Generated by roxygen2: do not edit by hand

=======
<<<<<<< HEAD
# Generated by roxygen2: do not edit by hand

=======

useDynLib(FastqCleaner)
>>>>>>> upstream/master
>>>>>>> upstream/master
export(adapter_filter)
export(check_encoding)
export(complex_filter)
export(fixed_filter)
export(inject_letter_random)
export(launch_fqc)
export(length_filter)
export(n_filter)
export(qmean_filter)
export(random_length)
export(random_qual)
export(random_seq)
export(seq_filter)
export(seq_names)
export(trim3q_filter)
export(unique_filter)
import(Rcpp)
import(htmltools)
<<<<<<< HEAD
=======
<<<<<<< HEAD
>>>>>>> upstream/master
importFrom(Biostrings,BStringSet)
importFrom(Biostrings,DNAString)
importFrom(Biostrings,DNAStringSet)
importFrom(Biostrings,PhredQuality)
importFrom(Biostrings,dinucleotideFrequency)
importFrom(Biostrings,oligonucleotideFrequency)
importFrom(Biostrings,quality)
importFrom(Biostrings,replaceLetterAt)
importFrom(Biostrings,reverseComplement)
importFrom(Biostrings,trimLRPatterns)
importFrom(DT,dataTableOutput)
importFrom(DT,renderDataTable)
importFrom(IRanges,end)
importFrom(IRanges,narrow)
importFrom(IRanges,start)
importFrom(IRanges,width)
importFrom(S4Vectors,isConstant)
importFrom(ShortRead,FastqSampler)
importFrom(ShortRead,ShortReadQ)
importFrom(ShortRead,id)
importFrom(ShortRead,nFilter)
importFrom(ShortRead,sread)
importFrom(ShortRead,yield)
importFrom(graphics,hist)
importFrom(methods,as)
importFrom(methods,is)
importFrom(shinyBS,bsAlert)
importFrom(shinyBS,bsModal)
importFrom(shinyBS,bsPopover)
importFrom(stats,quantile)
useDynLib(FastqCleaner)
<<<<<<< HEAD
=======
=======
import(shiny, except=c(dataTableOutput, renderDataTable))
importFrom(shinyBS, bsPopover, bsModal, bsAlert)
importFrom(DT, dataTableOutput)
importFrom(DT, renderDataTable)
importFrom(S4Vectors, isConstant)
importFrom(graphics, hist)
importFrom(methods, as, is)
importFrom(stats, quantile)
importFrom(ShortRead, FastqStreamer, yield, sread, id, ShortReadQ, writeFastq, 
        countLines, nFilter, qa, tables, FastqSampler, occurrenceFilter,  
        narrow)
importFrom(Biostrings, BStringSet, PhredQuality, DNAString, width, start, end, 
        dinucleotideFrequency, which.isMatchingStartingAt, as.matrix, 
        oligonucleotideFrequency, reverse, replaceLetterAt, trimLRPatterns,  
        reverseComplement,isMatchingStartingAt, isMatchingEndingAt, quality, 
        DNAStringSet, subseq)
>>>>>>> upstream/master
>>>>>>> upstream/master
