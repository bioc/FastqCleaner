% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/complex_filter.R
\name{complex_filter}
\alias{complex_filter}
\title{Remove sequences with low complexity}
\usage{
complex_filter(input, threshold = 0.5, referenceEntropy = 3.908135)
}
\arguments{
\item{input}{\code{\link[ShortRead:ShortReadQ-class]{ShortReadQ}} object}

\item{threshold}{A threshold value computed as the relation of the H 
of the sequences and the reference H. Default is 0.5}

\item{referenceEntropy}{Reference entropy. By default, 
the program uses a value of 3.908, that corresponds 
to the entropy of the human genome in bits}
}
\value{
Filtered \code{\link[ShortRead:ShortReadQ-class]{ShortReadQ}}
object
}
\description{
The program removes low complexity sequences, computing the 
entropy with the observed frequency of dinucleotides.
}
\examples{

require('Biostrings')
require('ShortRead')

# create  sequences of different width
set.seed(10)
input <- lapply(c(0, 6, 10, 16, 20, 26, 30, 36, 40), 
<<<<<<< HEAD
               function(x) random_seq(1, x))
=======
<<<<<<< HEAD
               function(x) random_seq(1, x))
=======
function(x) random_seq(1, x))
>>>>>>> upstream/master
>>>>>>> upstream/master


# create repetitive 'CG' sequences with length adequante 
# for a total length:
# input +  CG = 40

set.seed(10)
CG <- lapply(c(20, 17, 15, 12, 10, 7, 5, 2, 0), 
<<<<<<< HEAD
            function(x) paste(rep('CG', x), collapse = ''))
=======
<<<<<<< HEAD
            function(x) paste(rep('CG', x), collapse = ''))
=======
function(x) paste(rep('CG', x), collapse = ''))
>>>>>>> upstream/master
>>>>>>> upstream/master


# concatenate input and CG
input  <- mapply('paste', input, CG, sep = '')
input <- DNAStringSet(input)

# plot relative entropy (E, Shannon 1948)

freq <- dinucleotideFrequency(input)
freq  <- freq /rowSums(freq)
H <- -rowSums(freq  * log2(freq), na.rm = TRUE)
H_max <- 3.908135  # max entropy
plot(H/H_max, type='b', xlab = 'Sequence', ylab= 'E')


# create qualities of width 40

set.seed(10)
input_q <- random_qual(c(30,40), slength = 9, swidth = 40, 
<<<<<<< HEAD
                       encod = 'Sanger')
=======
<<<<<<< HEAD
                       encod = 'Sanger')
=======
encod = 'Sanger')
>>>>>>> upstream/master
>>>>>>> upstream/master

# create names
input_names <- seq_names(9)

# create ShortReadQ object
my_read <- ShortReadQ(sread = input, quality = input_q, id = input_names)

# apply the filter
filtered <- complex_filter(my_read)

# look at the filtered sequences
sread(filtered)

}
\author{
Leandro Roser \email{learoser@gmail.com}
}
